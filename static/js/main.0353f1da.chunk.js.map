{"version":3,"sources":["pages/Home.js","pages/About.js","JS/DataProcess.js","JS/LinkedInteraction.js","graphs/NodeLink.js","graphs/ChordGraph.js","graphs/NodeGraph.js","Components/Graph.jsx","pages/Visualizations2.js","Components/NavBar.js","Components/footer.png","Components/FooterImage.js","Components/Footer.js","App.js","index.js","CSS/FooterImage.module.css","CSS/About.module.css","CSS/NodeLink.module.css","CSS/Home.module.css","CSS/NavBar.module.css"],"names":["home","CSS","Home","initialTab","title","className","Row","cards","deck","Col","md","Status","color","side","Header","Title","Body","Component","about","About","iframe","width","height","src","frameBorder","allow","allowFullScreen","DataProcess","data","filter","v","toId","uniqueNodes","nest","key","d","fromId","sortKeys","ascending","entries","id","sent","forEach","n","push","values","length","stats","_","zipObject","sentimentPerDay","date","rollup","sentiment","e","jobs","uniqBy","fromJobtitle","jobColor","array","nodes","links","linkInfo","jobName","userName","userEmail","fromEmail","arr","substring","lastIndexOf","split","el","subArray","i","charAt","toUpperCase","join","process","sortedNodes","job","name","processedData","a","findIndex","t","source","target","console","log","interaction","selectAll","paths","svg1","select","svg2","on","event","style","datum","sourceId","targetId","link_d","highlight","toggle","svg","zoomAttr","x","y","stopPropagation","transition","duration","call","transform","zoomIdentity","translate","scale","pointer","node","position","reset","introDisplay","desDisplay","document","getElementById","innerHTML","email","intro","description","display","zoomTransform","invert","tooltip","legend","zoom","scaleExtent","attr","NodeLink","container","append","tooltipDiv","scaleOrdinal","domain","range","legendDiv","graph","link","enter","html","pageX","pageY","text","forceSimulation","force","forceLink","distance","strength","forceManyBody","forceCenter","ChordGraph","scaleBand","allNodes","idToNode","value","scalePoint","start","end","SvgThree","NodeGraph","ar","dates","sentiments","Date","extent","padding","axisBottom","scaleLinear","axisLeft","line","delay","Graph","type","containerRef","React","useRef","useEffect","current","ref","gridContainer","titles","chord","info","vis1","vis2","introduction","important","Visualizations2","to","navbar","NavBar","Item","icon","footer","FooterImage","footerLogo","alt","footerTab","Footer","nav","copyright","App","useState","setData","csv","then","exact","path","component","render","ReactDOM","module","exports"],"mappings":"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","file":"static/js/main.0353f1da.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport { Tab, TabbedCard, Grid, Card } from \"tabler-react\";\r\nimport CSS from \"../CSS/Home.module.css\"\r\n\r\nconst { home } = CSS;\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n                <TabbedCard initialTab=\"The tool\">\r\n                <Tab title=\"The tool\" className={home}>\r\n                This interactive web-based tool provides 2 different visualisations to present dynamic network data.\r\n                Simply click on the Visualisations tab in the navigation bar above, and the 2 visualisations will load.\r\n                They are both node-link graphs; the first is a network diagram, where you can click a node to see all its\r\n                immediate connections. The second is an arc diagram, which presents the data on one axis, and on hovering\r\n                over a node, will highlight all its edges. Both diagrams provide a tooltip to view data about the node.<br />\r\n                <br />\r\n                The data comes from the Enron corpus, the history of which is also covered in more detail here. The data used\r\n                contains 149 employees, each unique employee represented by a node, and 31,401 emails between them, being represented\r\n                as edges. This is only a subset of the corpus, the full version of which contains over 600,000 emails and 158 employees,\r\n                with a revised version containing over 1.7 million emails, which offers one of the largest and richest set of \r\n                publically available, general-purpose corporate emails to date. The corpus also contains the actual email content \r\n                of the emails that were sent out from employees, however, for our project, we do not consider email content. Rather, \r\n                we work with a sentiment value that measures the \"tone\" of the email on an interval of [-1, 1]. <br />\r\n                <br />\r\n                The corpus is a widely used and popular dataset used by many researchers in their studies on social networking \r\n                and computer-mediated communication. Linguistic comparison with more recent corpora has shown changes in\r\n                the linguistic register of formal e-mail communication in the English language since the data was collected in 2002. \r\n                Jitesh Shetty and Jafar Adibi from the University of Southern California processed the data in 2004 and published a\r\n                MySQL version, in addition to a link analysis of which users emailed which, revealing more about the relationship between \r\n                various employees. The corpus is also used as test or training data for machine learning models and natural language processing.\r\n                </Tab>\r\n                <Tab title=\"The project\">The project is part of the Eindhoven University of Technology course 2IOA0 - DBL HTI + Webtech, \r\n                where we develop a web based application to interactively visualise dynamic network data; anything that can be modeled as a network is covered under this project. \r\n                Additionally, networks change over time, they are rarely static, so it can be very useful to visualise the structural changes \r\n                of a network over time. This site has been created as a part of the project, by Nagib Twahir, Julia Dobladez Brisquet, Samir Saidi, \r\n                and Poyraz Yapali.</Tab>\r\n                <Tab title=\"Enron\">\r\n                    <Grid.Row cards deck className={home}>\r\n                    <Grid.Col md={4}>\r\n                        <Card>\r\n                        <Card.Status color=\"yellow\" side />\r\n                            <Card.Header>\r\n                                <Card.Title>History</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                Enron Corporation was an American energy company based in Houston, Texas, founded by Kenneth Lay in 1985 \r\n                                as a merger between Houston Natural Gas and InterNorth. <br />\r\n                                <br />\r\n                                Enron employed approximately 29,000 staff, and was a major electricity, gas, communications and pulp and paper \r\n                                company before its bankruptcy on December 3, 2001, and had claimed revenues of $101 billion during 2000, a \r\n                                658% increase in just four years, from 1996 when their revenue was $13 billion. <br />\r\n                                <br />\r\n                                Their growth and success made them a very attractive company for investors, and was one of the world's leaders in business, \r\n                                comparable to how we view companies like Apple and Google today. Based on the information people knew then, investing \r\n                                in Enron in the stock market was the best choice due to this unprecedented and unheard of growth that seemed to have no \r\n                                signs of slowing down or stopping. <br />\r\n                                <br />\r\n                                As it turns out, only a year later in 2001 things would go quite badly as Enron went bankrupt and thousands of people lost \r\n                                their jobs, all the money they had invested into Enron, including retirement funds and 401k plans. This was due to a massive \r\n                                scandal involving Enron that was publicized in October of that year. \r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Grid.Col>\r\n                    <Grid.Col md={4}>\r\n                    <Card>\r\n                        <Card.Status color=\"orange\" side />\r\n                            <Card.Header>\r\n                                <Card.Title>Scandal</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                Several years after the formation of Enron, in 1990, Jeffrey Skilling was hired as chairman and CEO of Enron Finance Corp., after \r\n                                impressing Kenneth Lay during Skilling's work with Enron as a consultant for McKinsey & Company. Skilling was promoted to manage \r\n                                other companies under Enron, such as Enron Gas Servies Co., Enron Capital and Trade Resources, and later, became president and COO of Enron, \r\n                                second only to Lay.<br />\r\n                                <br />\r\n                                During Skilling's management, Enron adopted an accounting strategy called \"mark-to-market\", where the anticipated future profits from \r\n                                any deal were accounted for by estimating their present value, not their historical cost. For example, in 2000, Enron signed a 20 year contract \r\n                                with Blockbuster Video. Enron thought the contract would result in profits in excess of $100 million. The contract did not work out, however, \r\n                                and it was doomed from the start. The technology that Blockbuster signed the contract for did not actually work, and Blockbuster ended \r\n                                the deal.<br />\r\n                                <br />\r\n                                The problem with the mark-to-market strategy is that Enron recognized profits of $100 million from this deal, while they did not \r\n                                actually earn that money. Yet, they did report profits of $100 million from the deal. Repeated applications of this strategy made it seem like \r\n                                Enron was a very profitable company, by essentially creating profit out of thin air when it never actually existed. Enron used this \r\n                                as a way to cover up their failed deals, which, alongside many other accounting loopholes and shady business practices, caused this \r\n                                unprecedented growth in Enron's profit (which also means that, yes, the 658% increase in profit over 4 years previously mentioned \r\n                                was actually faked, however, financial advisors obviously did not know about this, and advised clients to invest in Enron due to this \r\n                                extremely large growth). <br />\r\n                                <br />\r\n                                They had also faked their debts/liabilities by creating offshore companies and they would push the \r\n                                debt over to them, making it seem like Enron had little debts, as it was no longer on their financial reports, and therefore nonexistent \r\n                                as far as investors are concerned. Due to this, Enron had manipulated the stock market by fooling investors and financial advisors into \r\n                                making it seem like Enron was very profitable.<br />\r\n                                <br />\r\n                                Enron's auditors, Arthur Andersen, would have exposed Enron's business practices and manipulation, but Enron had paid the auditors \r\n                                at Arthur Andersen to look the other way and ignore the issues. All of this led to lawsuits filed by Enron's shareholders, \r\n                                and investigations into Enron started by the United States Securities and Exchange Commission. The Federal Energy Regulatory Commission \r\n                                also investigated Enron, and produced the Enron corpus, generated from their email servers in the years leading up to the company's collapse, \r\n                                which is the dataset we are analysing. Enron filed for bankruptcy by December 2, 2001.\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Grid.Col>\r\n                    <Grid.Col md={4}>\r\n                    <Card>\r\n                        <Card.Status color=\"red\" side />\r\n                            <Card.Header>\r\n                                <Card.Title>Aftermath</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                The aftermath of the scandal introduced a new set of rules that dramatically changed the accounting industry due to its flaws at the time that led \r\n                                to this happening. Now, auditors have much stricter independence rules, and the CEO and CFO have to certify the financial statements, so they cannot deny \r\n                                that they ever saw them (which happened with Enron...) and additionally, penalties were increased for destroying, altering, or fabricating records in \r\n                                federal investigations or for attempting to defraud shareholders. <br />\r\n                                <br />\r\n                                A result of a class action lawsuit by Enron employees who had lost their jobs and their pensions was a settlement of $3,100 for each employee. Investors \r\n                                received $4.2 billion in settlement from several banks in 2005. In 2008, a $7.2 billion settlement was reached on behalf of the shareholders.\r\n                                <br />\r\n                                Lay had long supported former president George W. Bush and donated to his campaigns, including his successful campaign in 2000, which increased criticism of the Bush administration in light of the scandal (due to the money that was used to donate to his campaign) \r\n                                and the Economist on January 2002 claimed Lay had been a close personal friend of Bush's family, and had backed him financially since his Congress bid in 1978, \r\n                                and he was rumored to be running as Secretary of Energy under Bush's administration, and in the same month, Time magazine accused the administration of \r\n                                attempting to distance themselves from the scandal.\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Grid.Col>\r\n                    </Grid.Row>\r\n                </Tab>\r\n                </TabbedCard>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport \"tabler-react/dist/Tabler.css\";\r\nimport { Grid, Card } from \"tabler-react\";\r\nimport CSS from \"../CSS/About.module.css\"\r\n\r\nconst { about, iframe } = CSS;\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n            <Grid.Row cards deck className={about}>\r\n            <Grid.Col md={4}>\r\n            <Card>\r\n                <Card.Status color=\"yellow\" side />\r\n                    <Card.Header>\r\n                        <Card.Title>The tool</Card.Title>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        This interactive web-based tool provides 2 different visualisations \r\n                        to present dynamic network data.\r\n                    </Card.Body>\r\n            </Card>\r\n            </Grid.Col>\r\n            <Grid.Col md={4}>\r\n            <Card>\r\n                <Card.Status color=\"orange\" side />\r\n                    <Card.Header>\r\n                        <Card.Title>The data</Card.Title>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                    The sample data used is the email traffic of former energy service company Enron, \r\n                    with 149 employees with unique IDs (nodes) and 31.401 emails between them (edges).\r\n                    </Card.Body>\r\n            </Card>\r\n            </Grid.Col>\r\n            <Grid.Col md={4}>\r\n            <Card>\r\n                <Card.Status color=\"red\" side />\r\n                    <Card.Header>\r\n                        <Card.Title>Our team</Card.Title>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                    Nagib Twahir, Julia Dobladez Brisquet, Samir Saidi, Thomas Schoenmakers, and Poyraz Yapali are\r\n                    Bachelor students at the Eindhoven University of Technology. \r\n                    This site has been created as a part of the Q4 course titled DBL HTI + Webtech (2IOA0).\r\n                    </Card.Body>\r\n            </Card>\r\n            </Grid.Col>\r\n            </Grid.Row>\r\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/3VHdJkp0vKk\" \r\n                    title=\"YouTube video player\" \r\n                    frameBorder=\"0\" \r\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \r\n                    allowFullScreen></iframe>\r\n            </>\r\n        );\r\n      }\r\n}\r\n\r\n\r\nexport default About;\r\n","import { nest } from 'd3-collection';\r\nimport { ascending } from 'd3';\r\nimport _ from 'lodash';\r\n\r\nconst DataProcess = (data) => {\r\n    \r\n    // Filtering out e-mails sent to non existant users\r\n    data = data.filter(v => \r\n        v.toId !== '136' &&\r\n        v.toId !== '78')\r\n\r\n    // Group by message sent per user\r\n    let uniqueNodes = nest().key(d => d.fromId).sortKeys(ascending).entries(data);\r\n    \r\n    // links: (source, target, thickness)\r\n    // Thickness = count # toId's per fromId\r\n    let id = [];\r\n    let sent = [];\r\n    uniqueNodes.forEach(n => {\r\n        id.push(n.key);\r\n        sent.push(n.values.length);\r\n    })\r\n    let stats = _.zipObject(id, sent);\r\n    // something with sentiment\r\n        // TODO\r\n        // average sentiment of emails sent per node\r\n\r\n    // average sentiment per email sent\r\n    // let groupById = data.filter(v => v.fromId === String(96) && v.messageType === \"TO\");\r\n    // let averageSentiment = sum(groupById, v => v.sentiment) / groupById.length;\r\n    var sentimentPerDay = nest()\r\n    .key(d => d.fromId)\r\n    .key(v => v.date)\r\n    .rollup(v => {\r\n        let sentiment;\r\n        v.forEach(e => {\r\n           sentiment = e.sentiment;\r\n        });\r\n        return sentiment;\r\n    })\r\n    .entries(data);\r\n\r\n    // 10 most negative sent messages\r\n        // TODO\r\n\r\n    // Assigning colors to job titles\r\n    let jobs = [];\r\n    let colors = [\r\n        \"#003f5c\",\r\n        \"#2f4b7c\",\r\n        \"#665191\",\r\n        \"#a05195\",\r\n        \"#d45087\",\r\n        \"#f95d6a\",\r\n        \"#ff7c43\",\r\n        \"#ffa600\",\r\n        \"#488f31\",\r\n        \"#de425b\",\r\n        \"#69b3a2\"\r\n    ];\r\n    let uniqJob = _.uniqBy(uniqueNodes, e => e.values[0].fromJobtitle);\r\n    uniqJob.forEach(v => jobs.push(v.values[0].fromJobtitle));\r\n    let jobColor = _.zipObject(jobs, colors);\r\n\r\n\r\n    function process(array) {\r\n        // Processs the dataset into nodes and links\r\n        let nodes = [];\r\n        let links = [];\r\n        let linkInfo = [];\r\n\r\n        array.forEach(n => {\r\n            // Creating the nodes and links object\r\n            let jobName = n.values[0].fromJobtitle;\r\n            let userName = [];\r\n\r\n            // Creating Array of usernames\r\n            let userEmail = n.values[0].fromEmail;\r\n            let arr = userEmail.substring(0, userEmail.lastIndexOf(\"@\"));\r\n            arr = arr.split(\".\").filter(el => el !== \"\");\r\n            userName.push(arr);\r\n\r\n            // Adding capital letters to each first and surname.\r\n            userName.forEach(subArray => {\r\n                subArray.forEach((el, i) => {\r\n                    subArray[i] = (el.charAt(0).toUpperCase() + el.substring(1));\r\n                })\r\n                userName = subArray.join(\" \");\r\n            })\r\n            \r\n            nodes.push({\r\n                \"id\": n.key, \r\n                \"name\": userName,\r\n                \"email\": userEmail,\r\n                \"job\": {\r\n                    \"name\": jobName, \r\n                    \"color\": jobColor[jobName]\r\n                }\r\n            });\r\n\r\n            linkInfo.push({\r\n                \"id\": n.key, \r\n                \"job\": jobName, \r\n                \"thickness\": n.values.length\r\n            });\r\n\r\n            n.values.forEach(v => {\r\n                links.push({\r\n                    \"source\": v.fromId, \r\n                    \"target\": v.toId\r\n                });\r\n            });\r\n        })\r\n\r\n        return [nodes, links, linkInfo];\r\n    }\r\n\r\n    let [nodes, links, linkInfo] = process(uniqueNodes);\r\n    let sortedNodes = nest().key(d => d.job.name).sortKeys(ascending).entries(nodes);\r\n\r\n    // filter out duplicate {toID, fromID} object pairs\r\n    links = links.filter((v,i,a) => \r\n        i === a.findIndex(t => (t.source === v.source && t.target===v.target))\r\n    );\r\n\r\n\r\n    let processedData = {\"nodes\": nodes, \"links\": links, \"jobs\": jobs, \"stats\": stats, \"sortedNodes\": sortedNodes, \"uniqueNodes\": uniqueNodes};\r\n    // TODO: get the count of msgs and append to links.thickness\r\n\r\n    // Console debug\r\n    console.log({uniqueNodes, processedData, data, linkInfo, jobColor, sortedNodes, sentimentPerDay});\r\n\r\n\r\n    return processedData;\r\n}\r\n\r\nexport default DataProcess;","// Imported values\r\nimport { select, selectAll, zoomTransform, pointer } from 'd3';\r\nimport { zoomAttr, zoomIdentity } from '../graphs/NodeLink';\r\n\r\n// Set the dimensions and margins of the graph\r\nconst \r\nmargin = {top: 10, right: 30, bottom: 30, left: 40},\r\nwidth = 648 - margin.left - margin.right,\r\nheight = 1152 - margin.top - margin.bottom;\r\n\r\n// // Zoom attribute, which sets the [min, max] zoom and calls zoomed\r\n// const zoomAttr = zoom()\r\n//     .scaleExtent([0.1,80])\r\n//     .on(\"zoom\", zoomed);\r\n\r\n// // Transforms the graph group on drag/double click\r\n// function zoomed({ transform }) {\r\n//     select(\"#graph\").attr(\"transform\", transform);\r\n//     }\r\n\r\n/**Main function */\r\nfunction interaction(stats) {\r\n\r\n    let links = selectAll(\"line\");\r\n    let paths = selectAll(\"path\");\r\n    let svg1 = select(\"#node-edge\");\r\n    let svg2 = select(\"#chord\");\r\n\r\n    selectAll(\"circle\")\r\n    .on(\"click\", (event, d) => {\r\n        highlight(d, links, paths);\r\n        toggle(d, \"none\", \"block\", stats);\r\n        position(event, d, svg1, zoomAttr);\r\n    })\r\n\r\n    svg1.on(\"click\", () => reset(links, paths, svg1, zoomAttr));\r\n    svg2.on(\"click\", () => reset(links, paths, svg1, zoomAttr));\r\n};\r\n\r\n/** Highlights links of selected node, \r\n * either red or green based of if the email was sent \r\n * or received respectively. \r\n */\r\nfunction highlight(d, links, paths) {\r\n\r\n    links\r\n        .style(\"stroke\", datum => {\r\n            let sourceId = datum.source.id;\r\n            let targetId = datum.target.id;\r\n            return sourceId === d.id ? \"red\"\r\n                : targetId === d.id ? \"green\"\r\n                : \"\";\r\n        });\r\n\r\n    paths\r\n        .style('stroke', link_d => { \r\n            return link_d.source === d.id || link_d.target === d.id ? '#69b3b2' : '#b8b8b8';\r\n        })\r\n        .style('stroke-width', link_d => { \r\n            return link_d.source === d.id || link_d.target === d.id ? 4 : 1;\r\n        });\r\n};\r\n\r\n/** Toggle function */\r\nfunction toggle(d = null, introDisplay = \"block\", desDisplay = \"none\", stats) {\r\n\r\n    if (d) {\r\n        document.getElementById(\"nodeName\").innerHTML = \"Name: \" + d.name;\r\n        document.getElementById(\"nodeTitle\").innerHTML = \"Job title: \" + d.job.name;\r\n        document.getElementById(\"nodeUserID\").innerHTML = \"User ID: \" + d.id;\r\n        document.getElementById(\"nodeEmailsSent\").innerHTML = \"Number of Emails sent: \" + stats[d.id];\r\n        document.getElementById(\"nodeEmailAddress\").innerHTML = \"Email: \" + d.email;\r\n        document.getElementById(\"nodeMeanSentiment\").innerHTML = \"Average sentiment: \" + d.sentiment;\r\n    } else {\r\n        document.getElementById(\"nodeName\").innerHTML = \"Name: \";\r\n        document.getElementById(\"nodeTitle\").innerHTML = \"Job title: \";\r\n        document.getElementById(\"nodeUserID\").innerHTML = \"User ID: \";\r\n        document.getElementById(\"nodeEmailsSent\").innerHTML = \"Number of Emails sent: \";\r\n        document.getElementById(\"nodeEmailAddress\").innerHTML = \"Email: \";\r\n        document.getElementById(\"nodeMeanSentiment\").innerHTML = \"Average sentiment: \";\r\n    }\r\n\r\n    let intro = document.getElementById(\"toolIntro\");\r\n    let description = document.getElementById(\"nodeDescription\");\r\n    intro.style.display = introDisplay;\r\n    description.style.display = desDisplay;\r\n};\r\n\r\n/** Positions node-edge graph's selected node to\r\n *  the center of the graph.\r\n */\r\nfunction position(event, d, svg, zoomAttr) {\r\n\r\n    let goodCricle = svg.selectAll(\"circle\").filter((datum) => {\r\n        return datum.id === d.id;\r\n    })\r\n\r\n    const {x, y} = goodCricle.datum();\r\n    event.stopPropagation();\r\n    svg.transition().duration(750).call(\r\n      zoomAttr.transform,\r\n      zoomIdentity\r\n        .translate(width / 2, height / 2)\r\n        .scale(2)\r\n        .translate(-x, -y),\r\n      pointer(event, svg.node())\r\n    )\r\n};\r\n\r\n// Resets viewbox to starting point\r\nfunction reset(links, paths, svg, zoomAttr) {\r\n\r\n    toggle()\r\n    // Return svg to starting position\r\n    svg.transition().duration(750).call(\r\n        zoomAttr.transform,\r\n        zoomIdentity,\r\n        zoomTransform(svg.node()).invert([width / 2, height / 2])\r\n    );\r\n    // Set link color to default\r\n    links.style(\"stroke\", \"#aaa\");\r\n    paths.style(\"stroke\", \"#aaa\");\r\n}\r\n\r\n\r\nexport { interaction };","import { forceLink, forceManyBody, select, forceSimulation, forceCenter, scaleOrdinal, zoom, zoomIdentity } from 'd3';\r\nimport DataProcess from '../JS/DataProcess';\r\nimport CSS from '../CSS/NodeLink.module.css';\r\nimport { interaction } from '../JS/LinkedInteraction';\r\n\r\n\r\n// Destructure css styles f\r\nconst { tooltip, legend } = CSS;\r\n\r\n// Set the dimensions and margins of the graph\r\nconst \r\nmargin = {top: 10, right: 30, bottom: 30, left: 40},\r\nwidth = 648 - margin.left - margin.right,\r\nheight = 1152 - margin.top - margin.bottom;\r\nconst NodeLink = (container, data) => {\r\n    // Processs the dataset into nodes and links\r\n    data = DataProcess(data);\r\n\r\n    // Destructure data to prevent redundancy\r\n    const { nodes, links, jobs, stats } = data;\r\n    let colors = [\r\n        \"#003f5c\",\r\n        \"#2f4b7c\",\r\n        \"#665191\",\r\n        \"#a05195\",\r\n        \"#d45087\",\r\n        \"#f95d6a\",\r\n        \"#ff7c43\",\r\n        \"#ffa600\",\r\n        \"#488f31\",\r\n        \"#de425b\",\r\n        \"#69b3a2\"\r\n    ];\r\n\r\n    // Append the svg object to the div container\r\n    let svg = select(container)\r\n    .append(\"svg\")\r\n    .attr(\"viewBox\", [0, 0, width, height])\r\n\r\n    // Create and append tooltip to the div container\r\n    let tooltipDiv = select(container)\r\n    .append(\"div\")\r\n    .attr(\"class\", tooltip)\r\n    .style(\"opacity\", 0);\r\n\r\n    // Initialize Legend\r\n    let color = scaleOrdinal().domain(jobs).range(colors);\r\n    let legendDiv = select(container)\r\n    .append(\"div\")\r\n    .attr(\"class\", legend)\r\n    .append(\"svg\")\r\n    .attr(\"height\", \"215px\");\r\n\r\n    // Create graph group, containing all the elements of the graph\r\n    let graph = svg\r\n    .append(\"g\")\r\n    .attr(\"id\", \"graph\");\r\n\r\n    // Initialize the links\r\n    let link = graph\r\n        .selectAll(\"line\")\r\n        .data(links)\r\n        .enter()\r\n        .append(\"line\")\r\n        .style(\"stroke\", \"#aaa\")\r\n        .style(\"stroke-width\", 1)\r\n\r\n    // Initialize the nodes\r\n    let node = graph\r\n        .selectAll(\"circle\")\r\n        .data(nodes)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"r\", 10)\r\n        .style(\"fill\", n => n.job.color)\r\n        .on(\"mouseover\", mouseOver)\r\n        .on(\"mouseout\", function(d) {\r\n            tooltipDiv.transition()\r\n              .duration(500)\r\n              .style(\"opacity\", 0)\r\n          });\r\n\r\n    // Add one dot in the legend for each name.\r\n    legendDiv.selectAll(\"mydots\")\r\n    .data(jobs)\r\n    .enter()\r\n    .append(\"circle\")\r\n    .attr(\"cx\", 10)\r\n    .attr(\"cy\", (d,i) => 10 + i*20) // 100 is where the first dot appears. 25 is the distance between dots\r\n    .attr(\"r\", 7)\r\n    .style(\"fill\", d => color(d));\r\n\r\n    // Add the name of the job title for each previously placed dot.\r\n    legendDiv.selectAll(\"mylabels\")\r\n    .data(jobs)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"x\", 30)\r\n    .attr(\"y\", (d,i) => 10 + i*20) // 100 is where the first dot appears. 25 is the distance between dots\r\n    .style(\"fill\", d => color(d))\r\n    .text(d => d)\r\n    .attr(\"text-anchor\", \"left\")\r\n    .style(\"alignment-baseline\", \"middle\")\r\n    .style(\"top\", \"50px\")\r\n    .style(\"right\", \"50px\");\r\n\r\n    // forceSimulation will generate (x,y) pairs for nodes and links,\r\n    // which can be dynamically updated, for interaction.\r\n    let simulation = forceSimulation(nodes);              // Force algorithm is applied to data.nodes\r\n        simulation.force(\"link\", forceLink()                    // This force provides links between nodes\r\n                .id(d => d.id)                    // This links the node.name \r\n                .links(links)                             // to the source/target\r\n                .distance(0).strength(0.05)\r\n        )\r\n        .force(\"charge\", forceManyBody().strength(-4000))        // This adds repulsion between nodes.\r\n        .force(\"center\", forceCenter(height / 2, width / 2))    // This force attracts nodes to the center of the svg area                   \r\n        .on(\"tick\", ticked);                                // The \"tick\" tag specifies when the nodes (x,y) should change\r\n     \r\n        \r\n    /** FUNCTIONS */    \r\n    // This function is run at each iteration of the force algorithm, updating the nodes position.\r\n    function ticked() {\r\n        link\r\n            .attr(\"x1\", d => d.source.x)\r\n            .attr(\"y1\", d => d.source.y)\r\n            .attr(\"x2\", d => d.target.x)\r\n            .attr(\"y2\", d => d.target.y)\r\n            .attr(\"source\", d => d.source.id)\r\n            .attr(\"target\", d => d.target.id);\r\n\r\n        node\r\n            .attr(\"cx\", d => d.x)\r\n            .attr(\"cy\", d => d.y);\r\n    }\r\n\r\n\r\n\r\n\r\n    /** Mouse hover function */\r\n    function mouseOver (event,d) {\r\n        tooltipDiv.transition()\r\n          .duration(200)\r\n          .style(\"opacity\", 1)\r\n          tooltipDiv.html(\r\n              \"Name: \" + d.name + \"</br>\" +\r\n              \"Job title: \" + d.job.name + \"</br>\" + \r\n              \"User ID: \" + d.id + \"</br>\" + \r\n              \"Number of Emails sent: \" + stats[d.id] + \"</br>\" +\r\n              \"Email: \" + d.email\r\n            )\r\n            .style(\"display\", \"block\")\r\n            .style(\"left\", (event.pageX + 28) + \"px\")\r\n            .style(\"top\", (event.pageY - 162) + \"px\");\r\n    }\r\n\r\n    interaction(stats);\r\n    svg.call(zoomAttr);\r\n}\r\n\r\n/** Transforms the graph group on drag/double click */\r\nfunction zoomed({ transform }) {\r\n    select(\"#graph\").attr(\"transform\", transform);\r\n}\r\n\r\n/** Zoom attribute, which sets the [min, max] zoom and calls zoomed */\r\nconst zoomAttr = zoom()\r\n    .scaleExtent([0.1,80])\r\n    .on(\"zoom\", zoomed);\r\n\r\nexport { zoomAttr, zoomIdentity };\r\nexport default NodeLink;\r\n","import { select, scaleBand, scalePoint } from 'd3';\r\nimport DataProcess from '../JS/DataProcess';\r\nimport CSS from '../CSS/NodeLink.module.css';\r\nimport { interaction } from '../JS/LinkedInteraction';\r\n\r\n\r\n// Destructure css styles\r\nconst { tooltip, legend } = CSS;\r\n\r\n// Set the dimensions and margins of the graph\r\nconst \r\nmargin = {top: 10, right: 30, bottom: 30, left: 40},\r\nwidth = 648 - margin.left - margin.right,\r\nheight = 1152 - margin.top - margin.bottom;\r\n\r\nconst ChordGraph = (container, data) => {\r\n    // Processs the dataset into nodes and links\r\n    data = DataProcess(data);\r\n\r\n    // Destructure data to prevent redundancy\r\n    const { nodes, links, jobs, stats, sortedNodes } = data;\r\n    let colors = [\r\n        \"#003f5c\",\r\n        \"#2f4b7c\",\r\n        \"#665191\",\r\n        \"#a05195\",\r\n        \"#d45087\",\r\n        \"#f95d6a\",\r\n        \"#ff7c43\",\r\n        \"#ffa600\",\r\n        \"#488f31\",\r\n        \"#de425b\",\r\n        \"#69b3a2\"\r\n    ];\r\n\r\n    // append the svg object to the body of the page\r\n    let svg = select(container)\r\n        .append(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n\r\n    // Create and append tooltip to the div container\r\n    let tooltipDiv = select(container).append(\"div\")\r\n    .attr(\"class\", tooltip)\r\n    .style(\"opacity\", 0);\r\n\r\n    // Initialize Legend\r\n    let color = scaleBand().domain(jobs).range(colors);\r\n    let legendDiv = select(container)\r\n    .append(\"div\")\r\n    .attr(\"class\", legend)\r\n    .append(\"svg\")\r\n    .attr(\"height\", \"215px\");\r\n    \r\n    // Create graph group, containing all the elements of the graph\r\n    let graph = svg\r\n    .append(\"g\")\r\n    .attr(\"id\", \"graph\");\r\n\r\n    // List of node names\r\n    let allNodes = [];\r\n    let idToNode = {};\r\n    sortedNodes.forEach(node => {\r\n        node.values.forEach(value => {\r\n            allNodes.push(value.name)\r\n            idToNode[value.id] = value\r\n        })\r\n    })\r\n\r\n\r\n    // A linear scale to position the nodes on the X axis\r\n    const y = scalePoint()\r\n        .range([0, height])\r\n        .domain(allNodes)\r\n\r\n    // Add links between nodes. Here is the tricky part.\r\n    // In my input data, links are provided between nodes -id-, NOT between node names.\r\n    // So I have to do a link between this id and the name\r\n    // let idToNode = {};\r\n    // nodes.forEach(n => idToNode[n.id] = n);\r\n    // Cool, now if I do idToNode[\"2\"].name I've got the name of the node with id 2\r\n\r\n    // Add the links\r\n    let link = graph\r\n    .append(\"g\")\r\n    .attr(\"class\", \"links\")\r\n    .selectAll(\"links\")\r\n    .data(links)\r\n    .enter()\r\n    .append('path')\r\n    .attr('d', d => {\r\n        let start = y(idToNode[d.source].name)    // X position of start node on the X axis\r\n        let end = y(idToNode[d.target].name)      // X position of end node\r\n        return ['M', 25, start, //height-30,    // the arc starts at the coordinate x=start, y=height-30 (where the starting node is)\r\n        'A',                            // This means we're gonna build an elliptical arc\r\n        (start - end)/2, ',',    // Next 2 lines are the coordinates of the inflexion point. Height of this point is proportional with start - end distance\r\n        (start - end)/2, 0, 0, ',',\r\n        start < end ? 1 : 0, 25, end, ',', ]//height-30] // We always want the arc on top. So if end is before start, putting 0 here turn the arc upside down.\r\n        .join(' ');\r\n    })\r\n    .style(\"fill\", \"none\")\r\n    .attr(\"stroke\", \"#aaa\");\r\n\r\n    // Add the circle for the nodes\r\n    let node = graph\r\n    .append(\"g\")\r\n    .attr(\"class\", \"nodes\")\r\n    .selectAll(\"nodes\")\r\n    .data(nodes)\r\n    .enter()\r\n    .append(\"circle\")\r\n    .attr(\"cy\", d => y(d.name))\r\n    .attr(\"cx\", 25)\r\n    .attr(\"r\", 5)\r\n    .style(\"fill\",  n => n.job.color);\r\n    node\r\n    .on(\"mouseover\", mouseOver)\r\n    .on(\"mouseout\", function(d) {\r\n        tooltipDiv.transition()\r\n            .duration(500)\r\n            .style(\"opacity\", 0)\r\n        link\r\n            .style('stroke', '#aaa')\r\n            .style('stroke-width', '1')\r\n        });\r\n\r\n    // Add one dot in the legend for each name.\r\n    legendDiv.selectAll(\"mydots\")\r\n    .data(jobs)\r\n    .enter()\r\n    .append(\"circle\")\r\n    .attr(\"cx\", 10)\r\n    .attr(\"cy\", (d,i) => 10 + i*20) // 100 is where the first dot appears. 25 is the distance between dots\r\n    .attr(\"r\", 7)\r\n    .style(\"fill\", d => color(d))\r\n\r\n    // Add the name of the job title for each previously placed dot.\r\n    legendDiv.selectAll(\"mylabels\")\r\n    .data(jobs)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"x\", 30)\r\n    .attr(\"y\", (d,i) => 10 + i*20) // 100 is where the first dot appears. 25 is the distance between dots\r\n    .style(\"fill\", d => color(d))\r\n    .text(d => d)\r\n    .attr(\"text-anchor\", \"left\")\r\n    .style(\"alignment-baseline\", \"middle\")\r\n\r\n\r\n    /** FUNCTIONS */   \r\n    // Mouse hover function\r\n    function mouseOver (event,d) {\r\n        tooltipDiv.transition()\r\n          .duration(200)\r\n          .style(\"opacity\", 1)\r\n          tooltipDiv.html(\r\n              \"Name: \" + d.name + \"</br>\" +\r\n              \"Job title: \" + d.job.name + \"</br>\" + \r\n              \"User ID: \" + d.id + \"</br>\" + \r\n              \"Number of Emails sent: \" + stats[d.id] + \"</br>\" +\r\n              \"Email: \" + d.email\r\n            )\r\n            .style(\"display\", \"block\")\r\n            .style(\"left\", (80) + \"px\")\r\n            .style(\"top\", (event.pageY - 162) + \"px\");\r\n        link\r\n          .style('stroke', function (link_d) { return link_d.source === d.id || link_d.target === d.id ? '#69b3b2' : '#b8b8b8';})\r\n          .style('stroke-width', function (link_d) { return link_d.source === d.id || link_d.target === d.id ? 4 : 1;})\r\n    }\r\n\r\n    interaction(stats);\r\n};\r\n\r\n\r\nexport default ChordGraph;\r\n","import { extent, scaleLinear, select, axisBottom, axisLeft, line, scaleBand } from 'd3';\r\nimport DataProcess from '../JS/DataProcess';\r\nimport CSS from '../CSS/NodeLink.module.css';\r\n// import { nest } from 'd3-collection';\r\n\r\n// Destructure css styles\r\nconst { SvgThree } = CSS;\r\n// Set the dimensions and margins of the graph\r\nconst \r\nmargin = {top: 10, right: 30, bottom: 90, left: 40},\r\nwidth = 460 - margin.left - margin.right,\r\nheight = 450 - margin.top - margin.bottom;\r\n\r\nconst NodeGraph = (container, data) => {\r\n\r\n    data = DataProcess(data);\r\n    const { uniqueNodes } = data;    \r\n\r\n\r\n    // Array.from(uniqueNodes[0]).forEach(n => {\r\n    //     n.values().forEach(e => {\r\n    //             ar.push(e.date.values());\r\n    //         });\r\n    //     });\r\n\r\n    // ar.forEach(id => {\r\n    //     id.values.forEach(date => {\r\n    //         date.value.forEach(e => {\r\n    //             ar.push(e.sentiment);\r\n    //         });\r\n    //     });\r\n    // });\r\n\r\n    let ar = uniqueNodes[0];\r\n    let dates = [];\r\n    let sentiments = []\r\n\r\n    ar.values.forEach(function(d) { \r\n        dates.push(d.date)\r\n        sentiments.push(d.sentiment) })\r\n\r\n    dates.forEach(function(d) {\r\n        return new Date(d.date)\r\n    })\r\n    console.log(dates, sentiments, ar)\r\n\r\n    var svg = select(container)\r\n    .append(\"svg\")\r\n    .attr(\"class\", SvgThree)\r\n    .attr(\"viewBox\", [0, 0, width, height])\r\n\r\n    // X axis\r\n    var x = scaleBand()\r\n    .domain(extent(dates))\r\n    .range([ 0, width ])\r\n    .padding(0.2);\r\n\r\n    svg.append(\"g\")\r\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n    .call(axisBottom(x))\r\n    .selectAll(\"text\")\r\n    .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\r\n    .style(\"text-anchor\", \"end\");\r\n\r\n    // Add Y axis\r\n    var y = scaleLinear()\r\n    .domain([ -1, 1 ])\r\n    .range([ height, 0 ]);\r\n    svg.append(\"g\")\r\n    .call(axisLeft(y));\r\n\r\n    // Add line\r\n    svg.append(\"path\")\r\n    .datum(data)\r\n    .attr(\"fill\", \"none\")\r\n    .attr(\"stroke\", \"#69b3a2\")\r\n    .attr(\"stroke-width\", 1.5)\r\n    .attr(\"d\", line()\r\n      .x(function(d) { return x(d.date) })\r\n      .y(function(d) { return y(d.value) })\r\n      )\r\n  // Add the points\r\n    svg\r\n    .append(\"g\")\r\n    .selectAll(\"dot\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"circle\")\r\n      .attr(\"cx\", function(d) { return x(d.date) } )\r\n      .attr(\"cy\", function(d) { return y(d.sentiment) } )\r\n      .attr(\"r\", 5)\r\n      .attr(\"fill\", \"#69b3a2\")\r\n\r\n    // Animation\r\n    svg.selectAll(\"rect\")\r\n    .transition()\r\n    .duration(800)\r\n    .attr(\"y\", d => y(d.sentiment))\r\n    .attr(\"height\", d => height - y(d.sentiment))\r\n    .delay((d,i) => {console.log(i); return i*100})\r\n\r\n}\r\n\r\nexport default NodeGraph;","import React, { useEffect } from \"react\";\r\nimport NodeLink from '../graphs/NodeLink';\r\nimport ChordGraph from '../graphs/ChordGraph';\r\nimport NodeGraph from '../graphs/NodeGraph';\r\n\r\n\r\nexport function Graph({ data, type }) {\r\n  const containerRef = React.useRef(null);\r\n\r\n  useEffect(() => {\r\n    let destroyFn;\r\n    // renders either the viz 1 or viz 2, based on the type parm.\r\n    destroyFn =\r\n    containerRef.current && type === 1 ? NodeLink(containerRef.current, data) :\r\n    containerRef.current && type === 2 ? ChordGraph(containerRef.current, data) :\r\n    containerRef.current && type === 3 ? NodeGraph(containerRef.current, data) :\r\n    null;\r\n\r\n    return destroyFn;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return <div ref={containerRef} />;\r\n}","import React from 'react';\r\nimport { Graph } from '../Components/Graph';\r\nimport { Link } from 'react-router-dom';\r\nimport CSS from '../CSS/NodeLink.module.css';\r\n\r\nconst { gridContainer, titles, node, chord, info, vis1, vis2, introduction, important } = CSS;\r\n\r\nconst Visualizations2 = ({ data }) => {\r\n    return (\r\n        <div className={gridContainer}>\r\n            <h1 id=\"one\" className={`${titles} ${node}`}>Node-edge graph of email network</h1>\r\n            <div className={vis1} id=\"node-edge\">\r\n                <Graph data={data} type={1} />\r\n            </div>\r\n            <div className={introduction} id=\"toolIntro\" style={{display: \"block\"}}>\r\n                <h1>Welcome to CSVIZ!</h1>\r\n                <p>This interactive visualisation tool provides you with two visualisations of dynamic network data.</p>\r\n                <p>The dataset comes from Enron, which, if you're interested, is covered in more depth in our <Link to=\"/\" > homepage.</Link></p>\r\n                <p>With this tool, you can: </p>\r\n                    <ul>\r\n                        <li><span className={important}>Drag</span>: Simply click and drag to move the graph around.</li>\r\n                        <li><span className={important}>Double click or scroll</span>: Double clicking or scrolling will zoom in on the graph. Clicking again will reset it to its original position.</li>\r\n                        <li><span className={important}>Node click</span>: Click on a node to zoom into the node, and display some information about the user the node represents, \r\n                            as well as a bar graph that contains the user's average email sentiment value per day.<br />\r\n                            Additionally, on the node diagram to your left, clicking on a node will also highlight incoming and outgoing edges, \r\n                            and hide all other edges not connected to the node, allowing you to see who this user has emailed, and who has emailed this user.<br />\r\n                            Red edges represent emails the user sent, while green edges represent emails the user received. </li>\r\n                        <li><span className={important}>Hover</span>: If you hover over a node, the same summary will be displayed in a small tooltip.<br />\r\n                            Additionally, on the chord diagram to your right, hovering on a node will also highlight all edges the user has \r\n                            with other users, representing the users who they have emailed.</li>\r\n                    </ul>\r\n                <p>We hope you enjoy using this tool!</p>\r\n            </div>\r\n            <div className={info} id=\"nodeDescription\" style={{display: \"none\"}}>\r\n                <h1>Node Information:</h1>\r\n                <p id=\"nodeName\">Name: </p>\r\n                <p id=\"nodeTitle\">Job title: </p>\r\n                <p id=\"nodeUserID\">User ID: </p>\r\n                <p id=\"nodeEmailsSent\">Number of Emails sent: </p>\r\n                <p id=\"nodeEmailAddress\">Email: </p>\r\n                <p id=\"nodeMeanSentiment\">Average sentiment: </p>\r\n                {/* <div className={SvgThree}>\r\n                    <Graph data={data} type={3}/>\r\n                </div> */}\r\n            </div>\r\n            <h1 id=\"two\" className={`${titles} ${chord}`}>Chord graph of email network</h1>\r\n            <div className={vis2} id=\"chord\">\r\n                <Graph data={data} type={2}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Visualizations2;\r\n","import React from 'react';\r\nimport CSS from '../CSS/NavBar.module.css';\r\nimport { Nav, Icon } from \"tabler-react\";\r\n\r\n<Icon prefix=\"fa\" name=\"user\" />;\r\nconst { navbar } = CSS;\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <div className={navbar}>\r\n                <Nav>\r\n                    <Nav.Item to=\"/\" value=\"Homepage\" icon=\"home\" />\r\n                    <Nav.Item to=\"/About\" value=\"About Us\" icon=\"globe\" />\r\n                    <Nav.Item to=\"/Visualizations2\" value=\"Visualizations\" icon=\"star\" />\r\n                    <Nav.Item to=\"https://github.com/NTwahir/2ioa0group24\" value=\"GitHub\" icon=\"github\" />\r\n                </Nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default NavBar;\r\n","export default __webpack_public_path__ + \"static/media/footer.2a8ca8a2.png\";","import React from 'react';\r\nimport footerLogo from './footer.png';\r\nimport CSS from '../CSS/FooterImage.module.css';\r\n\r\nconst { footer } = CSS;\r\n\r\nconst FooterImage = () => {\r\n    return (\r\n        <div>\r\n            <img className={footer} src={footerLogo} alt=\"CSVIZ Logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FooterImage;\r\n","import React from 'react';\r\nimport { Site } from \"tabler-react\";\r\nimport FooterImage from './FooterImage';\r\nimport CSS from '../CSS/FooterImage.module.css';\r\n\r\nconst { footerTab } = CSS;\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className = { footerTab }>\r\n            <Site>\r\n                <Site.Footer \r\n                nav = {<FooterImage />}\r\n                copyright = \"Site created using React, D3 and the Tabler React UI.\" >\r\n                </Site.Footer>\r\n            </Site>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { csv } from 'd3';\r\nimport { Route } from 'react-router-dom';\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport Visualizations2 from './pages/Visualizations2';\r\nimport NavBar from './Components/NavBar';\r\nimport Footer from './Components/Footer';\r\n\r\nconst url = 'https://raw.githubusercontent.com/NTwahir/2ioa0group24/master/data/enron-v1.csv'\r\n\r\nfunction App() {\r\n  const [data, setData] = useState(null)\r\n  \r\n  // Determines how often the dataset gets requested.\r\n  useEffect(() => {\r\n    // Load the csv dataset\r\n    csv(url).then(setData);\r\n  }, []);\r\n\r\n  if(!data) return <div>Loading... </div>;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar/>\r\n      <Route exact path=\"/\" component={Home}/>\r\n      <Route exact path=\"/about\" component={About}/>\r\n      <Route exact path=\"/Visualizations2\" render={() => (\r\n        <Visualizations2 data={data} />)}/>\r\n      <Footer/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './CSS/index.css'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerTab\":\"FooterImage_footerTab__1TXtN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"about\":\"About_about__2Hbag\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridContainer\":\"NodeLink_gridContainer__6OUIb\",\"tooltip\":\"NodeLink_tooltip__BMukY\",\"legend\":\"NodeLink_legend__1c5GI\",\"titles\":\"NodeLink_titles__vvgPw\",\"node\":\"NodeLink_node__JRnie\",\"chord\":\"NodeLink_chord__2Yv3H\",\"vis1\":\"NodeLink_vis1__3xWRG\",\"vis2\":\"NodeLink_vis2__3hu-6\",\"SvgThree\":\"NodeLink_SvgThree__2DjTT\",\"info\":\"NodeLink_info__1CpEn\",\"introduction\":\"NodeLink_introduction__26s_b\",\"important\":\"NodeLink_important__11RPf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__9bb7G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"NavBar_navbar__23guE\"};"],"sourceRoot":""}